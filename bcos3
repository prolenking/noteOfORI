func TestHash(t *testing.T) {
	tx := Transaction2{
		DataHash: nil,
		Data: struct {
			Version    int32
			ChainID    []byte
			GroupID    []byte
			BlockLimit int64
			Nonce      string
			To         []byte
			Input      string
			Abi        []byte
		}{
			Version:    0,
			ChainID:    []byte("chain1"),
			GroupID:    []byte("group1"),
			BlockLimit: 764,
			Nonce:      "0x31363131323233363939383335363233323339353131363936363437383133373939353538373434",
			To:         []byte("0xc56aa41f20a345ffe91a89776bfa20dfe1ce64f7"),
			Input:      "0xce3c930000000000000000000000000096019d78db7fa4e3d17b0a92f25a5c3e2fd15394000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000004d68747470733a2f2f656f61746573746465762e737363632e636f6d2f6170692f72656d2d726567697374726174696f6e62697a7765622f6e6f6e64732f6f73732f646f776e6c6f616446696c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000045700000000000000000000000000000000000000000000000000000000000008ae00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000d05000000000000000000000000000000000000000000000000000000000000115c0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008646f6348617368310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008646f6348617368320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000008646f6348617368330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008646f634861736834000000000000000000000000000000000000000000000000",
			Abi:        []byte(""),
		},
	}
	err := implCalculate(tx, &bytes.Buffer{})
	require.NoError(t, err)
}

func implCalculate(transaction Transaction2, out *bytes.Buffer) error {
	if len(transaction.DataHash) != 0 {
		out.Write(transaction.DataHash)
		return nil
	}

	hashFields := transaction.Data
	err := binary.Write(out, binary.BigEndian, hashFields.Version)
	if err != nil {
		return err
	}
	out.Write(hashFields.ChainID)
	out.Write(hashFields.GroupID)
	err = binary.Write(out, binary.BigEndian, hashFields.BlockLimit)
	if err != nil {
		return err
	}
	nonce, err := hex.Decode(hashFields.Nonce)
	if err != nil {
		return err
	}
	out.Write(nonce)
	out.Write(hashFields.To)
	input, err := hex.Decode(hashFields.Input)
	if err != nil {
		return err
	}
	out.Write(input)
	out.Write(hashFields.Abi)

	fmt.Println(hex.Encode(sm3.Sm3Sum(out.Bytes())))
	return nil
}

type Transaction2 struct {
	DataHash []byte
	Data     struct {
		Version    int32
		ChainID    []byte
		GroupID    []byte
		BlockLimit int64
		Nonce      string
		To         []byte
		Input      string
		Abi        []byte
	}
}